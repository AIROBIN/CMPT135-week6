#include <iostream> // for cout

#include "ArrayClass.h"
using namespace std;
// Function Prototype
void arrayClassTest();
// Main function that is called when the program is executed
int main() {
	arrayClassTest();
	return 0;

}
void arrayClassTest() {
	ArrayClass ac;
	ac.insert(1);
	ac.insert(2);
	cout << "ac.size() = " << ac.size() << endl;
	// Insert the values 1 to 7 in ac1
	for (int i = 3; i <= 40; ++i) {
		ac.insert(i);
	}
	cout << "ac.size() = " << ac.size() << endl;
}


#pragma once
class ArrayClass
{
public:
	ArrayClass();
	~ArrayClass();
	void insert(int value);
	int size();
private:
	int* arr;
	int arrSize;
	int n;
};


#include "ArrayClass.h"
ArrayClass::ArrayClass()
{
	arrSize = 2;
	arr = new int[arrSize];
	n = 0;
}
ArrayClass::~ArrayClass()
{
	delete[] arr;
}
void ArrayClass::insert(int value)
{
	if (n == arrSize)
	{
		arrSize *= 2;
		int* temp = new int[arrSize];
		for (int i = 0; i < n; i++)
			temp[i] = arr[i];
		delete[] arr;
		arr = new int[arrSize];
		for (int i = 0; i < n; i++)
			arr[i] = temp[i];
		delete[] temp;
	}
	arr[n] = value;
	n++;
}
int ArrayClass::size() { return n; }


#pragma once
#include<string>
#include <iostream>
using namespace std;

class StringSet {
	string* s;
	int curSize;
	int maxSize;
public:
	StringSet();
	StringSet(const StringSet&);
	~StringSet();
	StringSet& operator=(const StringSet&);
	bool insert(string);
	bool remove(string);
	int find(string)const;
	int size() const;
	StringSet unions(const StringSet&) const;
	StringSet intersection(const StringSet&) const;
	StringSet difference(const StringSet&) const;
	void print();
};


#include "StringSet.h"
#include<string>
using namespace std;

//POST: creates an array of strings of size 2 in dynamic memory, sets maximum size to 2, and current size to 0
StringSet::StringSet()
{	
	maxSize = 2; 
	s = new string[maxSize]; 
	curSize = 0; 
}

// POST: creates a deep copy of its parameter
StringSet::StringSet(const StringSet& set)
{
	maxSize = set.maxSize;
	curSize = set.curSize;
	s = new string[maxSize];
	for (int i = 0; i < curSize; i++)
		s[i] = set.s[i];
}

// Destructor
//PRE: string array is non-empty
//POST: De-allocates dynamic memory associated with object
StringSet::~StringSet() 
{ 
	if (s != NULL)
	{
		delete[] s;
		s = NULL;
		curSize = 0;
	}
}

//PRE: the parameter is different from the calling object, and string array is non-empty
//POST: creates a deep copy of its parameter, assigns it to the calling object
StringSet& StringSet::operator=(const StringSet& set)
{
	if (this == &set)
		return *this;
	if (s != NULL)
		delete[] s;
	maxSize = set.maxSize;
	curSize = set.curSize;
	s = new string[maxSize];
	for (int i = 0; i < curSize; i++)
		s[i] = set.s[i];
	return *this;
}

// POST: returns false without inserting value if a string matching the parameter
//is already in the array, otherwise: inserts the string parameter at the next available index
bool StringSet::insert(string str)
{
	for (int i = 0; i < curSize; i++)
		if (s[i] == str)
			return false;
	if (curSize == maxSize)
	{
		//Store data
		string* temp = s;
		//Expand capacity
		maxSize *= 2;
		//Reallocate memory
		s = new string[maxSize];
		//Restore previous content
		for (int i = 0; i < curSize; i++)
			s[i] = temp[i];
		delete[] temp;
	}
	s[curSize++] = str;
	return true;
}

//POST: returns false if a string matching the parameter is not in the array,
//otherwise: replaces matching string with the last string in the array(if there is one);
//decrements current sizeand returns true
bool StringSet::remove(string str)
{
	int n = find(str);     
	if (n == -1)
		return false;
	for (int i = n; i + 1 < curSize; i++)
		s[i] = s[i + 1];
	curSize--;
	s[curSize] = "";
	return true;
}

//POST: if a string matching the parameter is in the array returns the index of that string, otherwise returns - 1
int StringSet::find(string str)const
{
	for (int i = 0; i < curSize; i++)
		if (s[i] == str)
			return i;
	return -1;
}

//POST: returns the current size(the number of strings in the array)
int StringSet::size() const
{
	return curSize;
}

//POST: returns a StringSet object that contains the union of the calling objectand the parameter
StringSet StringSet::unions(const StringSet& set) const
{
	StringSet ans;
	for (int i = 0; i < curSize; i++)
		ans.insert(s[i]);
	for (int i = 0; i < set.size(); i++)
		ans.insert(set.s[i]);
	if (ans.s == NULL)
		ans.curSize = 0;
	return ans;
}

//POST: returns a StringSet object that contains the intersection of the calling objectand the parameter
StringSet StringSet::intersection(const StringSet& str) const
{
	StringSet ans;
	for (int i = 0; i < curSize; i++)
		if (str.find(s[i]) > -1)
			ans.insert(s[i]);
	return ans;
}

//POST: returns a StringSet object that contains the set difference of the calling objectand the parameter
StringSet StringSet::difference(const StringSet& str) const
{
	StringSet ans(*this);
	for (int i = 0; i < str.curSize; i++)
		ans.remove(str.s[i]);
	return ans;
}

void StringSet::print()
{
	cout << curSize << endl;
	for (int i = 0; i < curSize; i++)
		cout << s[i]<<" ";
	cout << endl;
}

#include<iostream>
#include<string>
#include"StringSet.h"
using namespace std;


void test()
{
	StringSet sset1;
	sset1.insert("cat");
	sset1.insert("bat");
	sset1.insert("rat");
	sset1.insert("badger");
	StringSet sset2;
	sset2.insert("elephant");
	sset2.insert("bat");
	sset2.insert("hamster");
	 //Use the copy constructor to build a StringSet with sset1 – sset2
	StringSet sset3(sset1.difference(sset2));
	sset3.print();
	// Use the overloaded assignment operator to make a StringSet
	// contain sset2 – sset1
	StringSet sset4 = sset2.difference(sset1);
	sset4.print();
	
	
}


int main()
{
	test();
	system("Pause");
	return 0;
}

