#include<iostream>
#include<string>
#include<cmath>
#include<algorithm>
using namespace std;

string toString(int dollars,int cents) //other member function to return money as $DOLLARS.CENTS
	{
		int count1=0,count2=0;
		int d=dollars,c=cents;
		while(d!=0){d/=10;count1++;}   //328
		while(c!=0){c/=10;count2++;}
		d=dollars,c=cents;
		char* s=new char[count1+count2+3];
		s[0]='$';
		for(int i=count1;i>0;i--)
		{
			s[i]=d%10+'0';
			d/=10;
		}
		s[count1+1]=',';
		for(int i=count2;i>0;i--)
		{
			s[count1+1+i]=c%10+'0';
			c/=10;
		}
		s[count1+count2+2]='\0';
		return s;
	}

	int stringtoint(char*str)
	{
		int i=0,result=0;
		if(str[0]=='-')
			i++;
		while(str[i]!='\0')
		{	
			result=result*10+(str[i]-'0');
			i++;
		}
		if(str[0]=='-')
			result*=-1;
		return result;
	}
		
int  countDistinctChars(char *s)
{
	int L=0;
	while(s[L]!='\0')
		L++;
	int c[26]={0};
	for(int i=0;i<L;i++)
		c[s[i]-'a']++;
	int count=0;
	for(int i=0;i<26;i++)
		if(c[i]>0)
			count++;
	return count;
}
//	
//int gcd(int a,int b){
//	return b==0?a:gcd(b,a%b);}
//
//int a,b;
//while(b>0)
//{
//	int t=a%b;a=b;b=t;}
//num/=a;denom/=a;


//在【100,999】的范围内找出所以满足以下条件的数并输出 
//1. 这个数是一个完全平方数 
//2. 这个数中某个数字出现的次数大于1次
int* countEachNumber(int n)
{
	int* exist=new int[10]();
	while(n!=0)
	{
		exist[n%10]++;
		n/=10;
	}
	return exist;
}
void printALL1()
{
	int temp,a,b,c;
	for(int i=10;i<=31;i++)
	{
		temp=i*i;
		c=temp%10;
		b=temp/10%10;
		a=temp/100;
		if(a==b||b==c||a==c)
			cout<<temp<<" ";
	}
}
void printALL2()
{
	int temp;
	for(int i=10;i<=31;i++)
	{
		int exist[10]={0};
		temp=i*i;
	//	bool check=false;
		while(temp)
		{
			exist[temp%10]++;
			if(exist[temp%10]>1)
			{
				cout<<i*i<<" ";
				break;
			}
			temp/=10;
		}
		//if(check)
	//		cout<<i*i<<" ";
	}
}

void print2()  //7744
{
	int temp;
	for(int i=32;i<100;i++)
	{
		temp=i*i;
		int exist[10]={0};
		int count=0;
		while(temp)
		{
			exist[temp%10]++;
			if(exist[temp%10]==2)
				count++;
			if(count==2)
			{	
				cout<<i*i<<" ";
				break;
			}
			temp/=10;
		}
	}
}
bool isSquare(int n)
{
	//all All perfect squares are sums of consecutive odd numbers
	// 1 = 1
	// 4 = 1 + 3
	// 9 = 1 + 3 + 5
	// 16 = 1 + 3 + 5 + 7
	/*for(int i=1;m>0;i+=2)
		m-=i;
	return m==0;*/
	int root = (int)(sqrt(n*1.0) + 0.5);
	return root*root==n;
//	return (sqrt(n*1.0))%1==sqrt(n*1.0));
}
int squareroot(const int&n)    //binary search   O(log n)    used in array or order permutation
{
	int left=0,right=n;  
	int mid; //long long   prevent overflow
	while(left<=right){
		mid=left+((right-left)>>1);
		if(mid*mid>n)
			right=mid-1;
		else if(mid*mid<n)
			left=mid+1;
		else
			return mid;
	}
	return left*left>n?left-1:left;
}
bool isPrime(int n)
{
	if(n<=1)
		return false;
	int sqr=(int)sqrt(n*1.0);
	for(int i=2;i<=sqr;i++)
		if(n%i==0)
			return false;
	return true;
}
bool isPrime2(long long n)
{   // 6x-1,  6x,6x+1,6x+2,6x+3,6x+4,6x+5,6(x+1),6(x+1)+1,
	if(n<=3)
		return n>=2;
	if(n%6!=5&&n%6!=1)   //6x+1,6x-1
		return 0;
	int sqr=(int)sqrt(n*1.0);
	for(int i=5;i<=sqr;i+=6)
		if(n%i==0||n%(i+2)==0)
			return 0;
	return 1;
}

void one_two_three(int x)
{    //1:2:3
	for(x=123;3*x<=987;x++)
	{
		int exist[10]={0};
		int count=0;
		for(int i=1;i<=3;i++)
		{	
			exist[i*x%10]++;
			exist[i*x/10%10]++;
			exist[i*x/100]++;
		}
		/*while(x>0)
		{
			exist[x%10]++;
			x/=10;
		}*/
		for(int j=1;j<=9;j++)
			if(exist[j]==1)
				count++;
		if(count==9)
			cout<<x<<" "<<2*x<<" "<<3*x<<endl;
	}
}

int xpower(int x,int n)
{
	if(n==0) return 1;
	else return x*xpower(x,n-1);
}
int factorial(int n)
{
	return n==0?1: n*factorial(n-1);
}
int gcd(int a,int b)
{
	return b==0?a:gcd(b,a%b);
}
bool sum(int a[],int size,int m)
{
	if(a[size-1]==m) return true;
	else if(size==0) return false;
	else{
		sum(a,size-1-1,m-a[size-1]);
		sum(a,size-1-1,m);
	}
}

//
//int main()
//{
//	
//	int a[]={1,5,5,5,5,5,5,5};
//	//cout<<sum(a,8,10);
//	
//
//	
//	
//	system("Pause");
//	return 0;
//
//}			

//
////Anytime minimize the number of cycles and the range of i, making time complexity maximum
//int main()
//{
//	//Money m(345,678);
//	//cout<<m.toString();
//	/*cout<<isSpecialSquare(7744);
//	cout<<isSpecialSquare(100);
//	cout<<isSpecialSquare(121);
//	cout<<isSpecialSquare(99999);
//	cout<<isSpecialSquare(529);*/
//	//printALL1();
//	//printALL2();
//	//print2();
//
//
//	//int A[5]={0,1,999,225,-9};
//	//for(int i=0;i<5;i++)
//	//	cout<<isSquare(A[i])<<" ";
//
//	
//
//		
//	
//		
//	
//
//	
//
//
//
//	
//	system("Pause");
//	return 0;
//}
//

