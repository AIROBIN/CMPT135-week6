#include<iostream>
using namespace std;



int findindex(int* arr, int s,int l,int target)
{
	if(s>l) return -1;
	if(arr[s]==target) return s;
	return findindex(arr,s+1,l,target);
}

int BinarySearch(int* arr, int first,int last,int target)
{
	int mid;
	while(first<=last){
		mid=first+(last-first)/2;
		if(mid>arr[mid])
			last=mid-1;
		else if(mid<arr[mid])
			first=mid+1;
		else
			return arr[mid];
	}
	return -1;
}

float* merge(float* arr1,int s1,float* arr2,int s2)
{
	float* a=new float[s1+s2];
	int index=0,index1=0,index2=0;
	/*if(s1>s2){
		swap(arr1,arr2);
		swap(s1,s2);
	}*/
	while(index1<s1&&index2<s2){
		if(arr1[index1]>=arr2[index2])	
			a[index++]=arr2[index2++];
		else
			a[index++]=arr1[index1++];
	
	}
	while(index2<s2)
		a[index++]=arr2[index2++];
	while(index1<s1)
		a[index++]=arr1[index1++];
	return a;
}
void merge(float* &a,int s,int mid,int e)
{
	int size=e-s+1;
	float* temp=new float[size];
	int index1=s,index2=mid+1,index=0;
	while(index1<=mid&&index<=e){
		if(a[index1]<=a[index2])	
			temp[index++]=a[index1++];
		else
			temp[index++]=a[index2++];
	}
	for(int i=0;i<size;i++)
		a[s+




int main()
{
	float a[]={0,1,2,3,4,5,6};
	float a2[]={0,1,3,5};
	float *b=merge(a,7,a2,4);

	system("Pause");
	return 0;
}





